---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: windows-customize
  annotations:
    description: windows-customize pipeline provides functionality for windows VMs to e.g. install sql server, or install VS Code into windows VM. This pipeline can be reused for customizing Windows 10 and 11.
spec:
  params:
    - name: customizeConfigMapName
      description: Name of the ConfigMap containing the customization and sysprep configuration files (unattend.xml, etc.). For example windows10-sqlserver or windows11-vs-code. It is possible to provide customize ConfigMaps created by the user too.
      type: string
      default: windows-vs-code
    - name: customizeConfigMapNameInstall
      description: Name of the ConfigMap containing the customization and sysprep configuration files (unattend.xml, etc.). For example windows10-sqlserver or windows11-vs-code. It is possible to provide customize ConfigMaps created by the user too.
      type: string
      default: windows10-bios-autounattend
    - name: baseDvName
      description: Name of the result windows disk
      type: string
      default: win10-customized
  tasks:
    - name: copy-vm-root-disk
      taskRef:
        kind: Task
        name: modify-data-object
      params:
        - name: manifest
          value: |-
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              name: $(params.baseDvName)
            spec:
              pvc:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 6Gi
                volumeMode: Filesystem
              source:
                http:
                  url: http://185.181.211.5/ISO/Windows_10_PRO_21H2_ENU.iso
        - name: waitForSuccess
          value: true
        - name: allowReplace
          value: true
    - name: create-base-dv
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              generateName: windows-10-base-
            spec:
              pvc:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 10Gi
                volumeMode: Filesystem
              source:
                blank: {}
        - name: waitForSuccess
          value: 'true'
      taskRef:
        kind: Task
        name: modify-data-object
    - name: create-vm
      params:
        - name: runStrategy
          value: RerunOnFailure
        - name: manifest
          value: |-          
            apiVersion: kubevirt.io/v1
            kind: VirtualMachine
            metadata:
              generateName: windows-customize-
            spec:
              runStrategy: RerunOnFailure
              template:
                metadata:
                  labels:
                    kubevirt.io/domain: windows-installer
                spec:
                  domain:
                    cpu:
                      sockets: 1
                      cores: 2
                      threads: 1
                    resources:
                      requests:
                        memory: 2Gi
                    devices:
                      disks:
                        - name: installcdrom
                          cdrom:
                            bus: sata
                          bootOrder: 1
                        - name: rootdisk
                          bootOrder: 2
                          disk:
                            bus: virtio
                        - name: virtiocontainerdisk
                          cdrom:
                            bus: sata
                        - name: sysprepInstall
                          cdrom:
                            bus: sata
                        - name: sysprep
                          cdrom:
                            bus: sata
                  volumes:
                  - name: sysprepInstall
                    sysprep:
                      configMap: 
                        name: $(params.customizeConfigMapNameInstall)
                  - name: sysprep
                    sysprep:
                      configMap: 
                        name: $(params.customizeConfigMapName)
                  - name: virtiocontainerdisk
                    containerDisk:
                      image: kubevirt/virtio-container-disk
                  - dataVolume:
                      name:  $(tasks.create-base-dv.results.name)
                    name: rootdisk
                  - dataVolume:
                      name:  $(tasks.copy-vm-root-disk.results.name)
                    name: installcdrom
      taskRef:
        kind: Task
        name: create-vm-from-manifest
      runAfter:
        - copy-vm-root-disk
        - create-base-dv
    - name: wait-for-vmi-status
      params:
        - name: vmiName
          value: $(tasks.create-vm.results.name)
        - name: vmiNamespace
          value: $(tasks.create-vm.results.namespace)
        - name: successCondition
          value: status.phase == Succeeded
        - name: failureCondition
          value: status.phase in (Failed, Unknown)
      runAfter:
        - create-vm
      timeout: 2h
      taskRef:
        kind: Task
        name: wait-for-vmi-status
  finally:
    - name: cleanup-vm
      params:
        - name: vmName
          value: $(tasks.create-vm.results.name)
        - name: vmNamespace
          value: $(tasks.create-vm.results.namespace)
        - name: delete
          value: true
      timeout: 10m
      taskRef:
        kind: Task
        name: cleanup-vm
  results:
    - name: baseDvName
      description: Name of the created base DataVolume
      value: $(tasks.copy-vm-root-disk.results.name)
