---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: windows-template-installer
spec:
  params:
    - name: winImageDownloadURL
      description: Download URL to Windows installation ISO (English United States x64 version is needed). You can follow e.g. https://www.microsoft.com/en-us/software-download/windows10ISO to get windows 10 iso.
      type: string
    - name: autounattendConfigMapName
      description: Name of the ConfigMap containing the sysprep configuration files (autounattend.xml, etc.).
      type: string
      default: windows10-bios-autounattend
    - name: virtioContainerDiskName
      description: Reference to the containerdisk containing the virtio-win drivers ISO.
      type: string
      default: quay.io/kubevirt/virtio-container-disk:v1.0.0
    - name: installCDRomName
      description: Name of datavolume which contains iso file.
      type: string
      default: windows-template-installer-cd-rom
    - name: baseDvName
      description: Name of the base DataVolume which is created. Pre-installed Windows VMs can be created from this DataVolume.
      type: string
      default: win10
  tasks:
    - name: create-source-dv
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              name: $(params.installCDRomName)
            spec:
              pvc:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 7Gi
                volumeMode: Filesystem
              source:
                http:
                  url: $(params.winImageDownloadURL)
        - name: waitForSuccess
          value: 'true'
      timeout: '1h'
      taskRef:
        kind: Task
        name: modify-data-object
    - name: create-vm-root-disk
      taskRef:
        kind: Task
        name: modify-data-object
      params:
        - name: manifest
          value: |-
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              name: $(params.baseDvName)
            spec:
              pvc:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 20Gi
                volumeMode: Filesystem
              source:
                blank: {}
        - name: waitForSuccess
          value: true
        - name: allowReplace
          value: true
    - name: create-vm
      params:
        - name: runStrategy
          value: RerunOnFailure
        - name: manifest
          value: |-          
            apiVersion: kubevirt.io/v1
            kind: VirtualMachine
            metadata:
              generateName: windows-template-installer-
            spec:
              runStrategy: RerunOnFailure
              template:
                metadata:
                  labels:
                    kubevirt.io/domain: windows-installer
                spec:
                  domain:
                    clock:
                      timer:
                        hpet:
                          present: false
                        hyperv: {}
                        pit:
                          tickPolicy: delay
                        rtc:
                          tickPolicy: catchup
                      utc: {}
                    cpu:
                      sockets: 1
                      cores: 4
                      threads: 1
                    resources:
                      requests:
                        memory: 6Gi
                    features:
                      acpi: {}
                      apic: {}
                      hyperv:
                        reenlightenment: {}
                        ipi: {}
                        synic: {}
                        synictimer:
                          direct: {}
                        spinlocks:
                          spinlocks: 8191
                        reset: {}
                        relaxed: {}
                        vpindex: {}
                        runtime: {}
                        tlbflush: {}
                        frequencies: {}
                        vapic: {}
                    machine:
                      type: pc-q35-rhel8.4.0
                    devices:
                      disks:
                        - cdrom:
                            bus: sata
                          name: installcdrom
                          bootOrder: 1
                        - disk:
                            bus: virtio
                          name: rootdisk
                          bootOrder: 2
                        - cdrom:
                            bus: sata
                          name: virtiocontainerdisk
                        - cdrom:
                            bus: sata
                          name: sysprep
                      interfaces:
                        - bridge: {}
                          name: default
                      inputs:
                        - type: tablet
                          bus: usb
                          name: tablet
                  terminationGracePeriodSeconds: 3600
                  networks:
                    - name: default
                      pod: {}
                  volumes:
                  - name: installcdrom
                    dataVolume:
                      name: $(params.installCDRomName)
                  - name: virtiocontainerdisk
                    containerDisk:
                      image: $(params.virtioContainerDiskName)
                  - name: sysprep
                    sysprep:
                      configMap: 
                        name: $(params.autounattendConfigMapName)
                  - dataVolume:
                      name:  $(tasks.create-vm-root-disk.results.name)
                    name: rootdisk
      taskRef:
        kind: Task
        name: create-vm-from-manifest
      runAfter:
        - create-source-dv
        - create-vm-root-disk
    - name: wait-for-vmi-status
      params:
        - name: vmiName
          value: $(tasks.create-vm.results.name)
        - name: successCondition
          value: status.phase == Succeeded
        - name: failureCondition
          value: status.phase in (Failed, Unknown)
      runAfter:
        - create-vm
      timeout: 2h
      taskRef:
        kind: Task
        name: wait-for-vmi-status
  finally:
    - name: cleanup-vm
      params:
        - name: vmName
          value: $(tasks.create-vm.results.name)
        - name: delete
          value: true
      timeout: 10m
      taskRef:
        kind: Task
        name: cleanup-vm
  results:
    - name: baseDvName
      description: Name of the created base DataVolume
      value: $(tasks.create-vm-root-disk.results.name)
